---
- name: Install required pip library
  pip:
    name: openshift
    state: present

- name: Ensure Proper Python dependency is installed for Openshift
  python_requirements_facts:
    dependencies: 
      - openshift
      - requests 

- name: Authenticate with the API
  command: >
    {{ openshift_cli }} login \
      -u {{ ocp_cluster_user_user }} \
      -p {{ ocp_cluster_user_password }} \
      --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
  register: login_out

- name: '{{ ansible_name_module }} | Deploy Operators'
          #failed_when: "operator_ns_created.results[key_cnt].rc >=1 and not ' already exists' in operator_ns_created.results[key_cnt].stderr"
  block:
    - name: '{{ ansible_name_module }} | Deploy Operators | Create Operator Namespace'
      command: >
        {{ openshift_cli }} new-project '{{ item.value.target_namespace }}' \
          --display-name='{{ item.value.target_namespace_description }}' \
          --description='{{ item.value.target_namespace_description }}'
      failed_when: "operator_ns_created.rc >=1 and not ' already exists' in operator_ns_created.stderr"
      with_dict: "{{ operators_to_deploy }}"
      loop_control:
        index_var: key_cnt
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.target_namespace_description is defined and item.value.target_namespace_description != ""
      register: operator_ns_created

    - name: '{{ ansible_name_module }} | debug | Print NS Creation Output'
      debug:
        var: operator_ns_created

    - name: '{{ ansible_name_module }} | debug | Print NS Creation Output Results'
      debug:
        var: operator_ns_created.results

    - name: '{{ ansible_name_module }} | template | Copy OperatorGroup Config to staging location'
      template: 
        src: "OperatorGroup.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-OperatorGroup.yml"
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.target_namespace_description is defined and item.value.target_namespace_description != ""
      vars: 
        operator_group_name: "{{ item.value.group_name }}"
        operator_target_namespace: "{{ item.value.target_namespace }}"
        operator_name: "{{ item.key }}"
      register: op_csc_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy operatorgroup '
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item.key }}-OperatorGroup.yml 
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.group_name is defined and item.value.group_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.target_namespace_description is defined and item.value.target_namespace_description != ""
      register: op_csc_deployed

    - name: '{{ ansible_name_module }} | template | Copy Operator Subscripion to staging location'
      template: 
        src: "Subscription.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ item.key }}-Subscription.yml"
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.target_namespace_description is defined and item.value.target_namespace_description != ""
      vars: 
        operator_catalog_name: "{{ item.value.catalog_name }}"
        operator_target_namespace: "{{ item.value.target_namespace }}"
        operator_name: "{{ item.key }}"
      register: op_sub_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | deploy operator subscription'
      command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ item.key }}-Subscription.yml
      with_dict:
        - "{{ operators_to_deploy }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.catalog_name is defined and item.value.catalog_name != ""
        - item.value.target_namespace is defined and item.value.target_namespace != ""
        - item.value.target_namespace_description is defined and item.value.target_namespace_description != ""
      register: op_sub_deployed

